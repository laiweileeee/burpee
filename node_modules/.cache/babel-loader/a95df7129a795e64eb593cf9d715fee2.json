{"ast":null,"code":"/* @preserve version 1.1.1 */\nconst INIT = 'INIT';\nconst UNSUPPORTED = 'UNSUPPORTED';\nconst PERMISSION_DENIED = 'PERMISSION_DENIED';\nconst PERMISSION_GRANTED = 'PERMISSION_GRANTED';\nconst PERMISSION_PROMPT = 'PERMISSION_PROMPT';\nconst ERROR = 'ERROR';\nconst STARTING_SUBSCRIBE = 'STARTING_SUBSCRIBE';\nconst SUBSCRIBED = 'SUBSCRIBED';\nconst STARTING_UNSUBSCRIBE = 'STARTING_UNSUBSCRIBE';\nconst UNSUBSCRIBED = 'UNSUBSCRIBED';\nconst states = {\n  INIT: {\n    id: INIT,\n    interactive: false,\n    subscribed: false\n  },\n  UNSUPPORTED: {\n    id: UNSUPPORTED,\n    interactive: false,\n    subscribed: false\n  },\n  PERMISSION_DENIED: {\n    id: PERMISSION_DENIED,\n    interactive: false,\n    subscribed: false\n  },\n  PERMISSION_GRANTED: {\n    id: PERMISSION_GRANTED,\n    interactive: true,\n    subscribed: false\n  },\n  PERMISSION_PROMPT: {\n    id: PERMISSION_PROMPT,\n    interactive: true,\n    subscribed: false\n  },\n  ERROR: {\n    id: ERROR,\n    interactive: false,\n    subscribed: false\n  },\n  STARTING_SUBSCRIBE: {\n    id: STARTING_SUBSCRIBE,\n    interactive: false,\n    subscribed: false\n  },\n  SUBSCRIBED: {\n    id: SUBSCRIBED,\n    interactive: true,\n    subscribed: true\n  },\n  STARTING_UNSUBSCRIBE: {\n    id: STARTING_UNSUBSCRIBE,\n    interactive: false,\n    subscribed: false\n  },\n  UNSUBSCRIBED: {\n    id: UNSUBSCRIBED,\n    interactive: true,\n    subscribed: false\n  }\n};\nconst PUSH_JS_WINDOW = 'PUSH_JS_WINDOW';\nconst PUSH_JS_SW = 'PUSH_JS_SW';\n\nvar noop = () => {};\n\nclass PermissionError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'PermissionError';\n    this.message = message || this.name;\n    this.stack = new Error().stack;\n  }\n\n}\n\nconst MIN_LENGTH = 10;\n\nconst randId = function rand(min = MIN_LENGTH, prepend = '') {\n  const result = Math.random().toString(36).slice(2); // eslint-disable-line no-magic-numbers\n\n  return result.length >= MIN_LENGTH ? prepend + result : rand(min, prepend);\n};\n/* global Promise */\n\n\nconst rejectedStates = {\n  UNSUBSCRIBED: true,\n  PERMISSION_DENIED: true,\n  ERROR: true\n};\nconst notifications = Object.create(null);\n/**\n * Class Push.\n * @example\n * const push = new Push();\n * push.subscribe().then(subscription => {})\n * push.unsubscribe().then(() => {})\n */\n\nclass Push {\n  /**\n   * @param {stateChangeCb} [stateChangeCb]\n   * @param {subscriptionUpdateCb} [subscriptionUpdateCb]\n   * @param {logCb} [logCb]\n   * @param {String} [serviceWorker] - Path to service-worker\n   */\n  constructor({\n    stateChangeCb = noop,\n    subscriptionUpdateCb = noop,\n    logCb = noop,\n    serviceWorker\n  } = {}) {\n    this._state = Object.assign({}, states.INIT);\n    this._stateChange = stateChangeCb;\n    this._subscriptionUpdateCb = subscriptionUpdateCb;\n    this._log = logCb;\n    this._serviceWorker = serviceWorker;\n\n    if (!Push.checkSupport()) {\n      this._setState(states.UNSUPPORTED);\n\n      return;\n    }\n\n    this._setState(Push.getPermissionState());\n\n    if (rejectedStates[this._state.id]) {\n      return;\n    }\n\n    this._addListener();\n\n    this._installServiceWorker().then(() => Push.getSubscription()).then(subscription => {\n      if (!subscription) {\n        this._setState(states.UNSUBSCRIBED);\n\n        return;\n      }\n\n      this._setState(states.SUBSCRIBED);\n\n      this._updateSubscription(subscription);\n    }).catch(error => {\n      this._setState(states.ERROR, error);\n    });\n  }\n  /**\n   * Sets new state\n   * @param {Object} state - see states.\n   * @param {Error} [error] - error object.\n   * @private\n   */\n\n\n  _setState(state, error) {\n    this._log('State update: ', state, error);\n\n    this._state = Object.assign({}, this._state, state);\n\n    this._stateChange(this._state, error);\n  }\n  /**\n   * Updates subscription\n   * @param {PushSubscription} subscription\n   * @private\n   */\n\n\n  _updateSubscription(subscription) {\n    this._log('Subscription update: ', subscription);\n\n    this._subscription = subscription;\n\n    this._subscriptionUpdateCb(this._subscription);\n  }\n  /**\n   * Installs service worker\n   * @returns {Promise.<undefined, Error>}\n   * @private\n   */\n\n\n  _installServiceWorker() {\n    return this._serviceWorker ? navigator.serviceWorker.register(this._serviceWorker).catch(error => {\n      this._setState(states.ERROR, error);\n\n      return Promise.reject(error);\n    }) : Promise.resolve();\n  }\n\n  _addListener() {\n    navigator.serviceWorker.addEventListener('message', event => {\n      let message = {};\n\n      try {\n        message = JSON.parse(event.data);\n      } catch (err) {\n        /* */\n      }\n\n      if (message.source === PUSH_JS_SW && message.data && message.data.eventName && notifications[message.data.tag] && event.ports) {\n        const {\n          tag,\n          eventName\n        } = message.data;\n\n        this._log('Message from SW: ', message.data);\n\n        event.ports[0].postMessage('OK');\n        notifications[tag].dispatchEvent(new Event(eventName));\n      }\n    });\n  }\n  /**\n   * @returns {Promise.<T>}\n   * @private\n   */\n\n\n  _handleUnsubscribe() {\n    this._updateSubscription(null);\n\n    this._setState(states.UNSUBSCRIBED);\n\n    return Promise.resolve();\n  }\n  /**\n   * @returns {Promise.<PushSubscription>}\n   * @private\n   */\n\n\n  _handleSubscribe(subscription) {\n    this._updateSubscription(subscription);\n\n    this._setState(states.SUBSCRIBED);\n\n    return Promise.resolve(subscription);\n  }\n  /**\n   * @returns {Object} Permission state\n   * @public\n   */\n\n\n  static getPermissionState() {\n    return {\n      ['denied']: states.PERMISSION_DENIED,\n      ['granted']: states.PERMISSION_GRANTED,\n      ['default']: states.PERMISSION_PROMPT\n    }[Notification.permission] || states.ERROR;\n  }\n  /**\n   * @returns {Boolean}\n   * @public\n   */\n\n\n  static checkSupport() {\n    const techs = ['serviceWorker', 'PushManager', 'permissions'];\n    techs.forEach(prop => {\n      if (!(prop in navigator)) {\n        return false;\n      }\n    });\n\n    if (!Notification) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Returns pushManager getSubscription promise.\n   * @see https://developer.mozilla.org/ru/docs/Web/API/PushManager/getSubscription\n   * @returns {Promise.<PushSubscription>}\n   * @public\n   */\n\n\n  static getSubscription() {\n    return navigator.serviceWorker.ready.then(registration => registration.pushManager.getSubscription());\n  }\n  /**\n   * Requests user permission to show notifications.\n   * @returns {Promise.<undefined, Error>}\n   * @public\n   */\n\n\n  static requestPermission() {\n    return new Promise((resolve, reject) => {\n      switch (Notification.permission) {\n        case 'denied':\n          return reject(new PermissionError('Push messages are blocked.'));\n\n        case 'granted':\n          return resolve();\n\n        case 'default':\n        default:\n          return Notification.requestPermission(result => {\n            if (result !== 'granted') {\n              reject(new PermissionError('Couldn\\'t obtain permission.'));\n            } else {\n              resolve();\n            }\n          });\n      }\n    });\n  }\n  /**\n   * Shows notification\n   * @param title\n   * @param options\n   * @returns {Promise.<Notification>}\n   */\n\n\n  static showNotification(title, options = {}) {\n    const tag = options.tag || randId();\n    const data = options.data || {};\n    data._source = PUSH_JS_WINDOW;\n    let notification;\n    return Push.requestPermission().then(() => navigator.serviceWorker.ready).then(registration => registration.showNotification(title, Object.assign({}, options, {\n      data,\n      tag\n    }))).then(() => navigator.serviceWorker.ready).then(registration => registration.getNotifications({\n      tag\n    })).then(matched => {\n      notification = matched[0];\n      notifications[tag] = notification;\n      return notification;\n    });\n  }\n  /**\n   * Creates new subscription\n   * @returns {Promise.<PushSubscription, Error>}\n   * @public\n   */\n\n\n  subscribe() {\n    return Push.getSubscription().then(subscription => {\n      if (subscription) {\n        return this._handleSubscribe(subscription);\n      }\n\n      this._setState(states.STARTING_SUBSCRIBE);\n\n      return Push.requestPermission().then(() => navigator.serviceWorker.ready).then(registration => registration.pushManager.subscribe({\n        userVisibleOnly: true\n      })).then(subscription => this._handleSubscribe(subscription)).catch(error => {\n        this._setState(error instanceof PermissionError ? Push.getPermissionState() : states.ERROR, error);\n\n        return Promise.reject(error);\n      });\n    });\n  }\n  /**\n   * Performs unsubscription.\n   * NB: Promise.resolve() will be returned in any case.\n   * We should respect user and treat his intention to unsubscribe in a proper way.\n   * @returns {Promise.<Boolean>}\n   * @public\n   */\n\n\n  unsubscribe() {\n    this._setState(states.STARTING_UNSUBSCRIBE);\n\n    return Push.getSubscription().then(subscription => {\n      if (!subscription) {\n        return Promise.resolve(true);\n      }\n\n      return subscription.unsubscribe();\n    }).then(() => {\n      this._log('Unsubscribed successfully.');\n    }).catch(() => {\n      this._log('Something went wrong, but whatever.');\n    }).then(() => this._handleUnsubscribe());\n  }\n\n}\n\nexport { states };\nexport default Push;","map":{"version":3,"sources":["C:/Users/laiwe/burpee/node_modules/push-js/dist/Push.js"],"names":["INIT","UNSUPPORTED","PERMISSION_DENIED","PERMISSION_GRANTED","PERMISSION_PROMPT","ERROR","STARTING_SUBSCRIBE","SUBSCRIBED","STARTING_UNSUBSCRIBE","UNSUBSCRIBED","states","id","interactive","subscribed","PUSH_JS_WINDOW","PUSH_JS_SW","noop","PermissionError","Error","constructor","message","name","stack","MIN_LENGTH","randId","rand","min","prepend","result","Math","random","toString","slice","length","rejectedStates","notifications","Object","create","Push","stateChangeCb","subscriptionUpdateCb","logCb","serviceWorker","_state","assign","_stateChange","_subscriptionUpdateCb","_log","_serviceWorker","checkSupport","_setState","getPermissionState","_addListener","_installServiceWorker","then","getSubscription","subscription","_updateSubscription","catch","error","state","_subscription","navigator","register","Promise","reject","resolve","addEventListener","event","JSON","parse","data","err","source","eventName","tag","ports","postMessage","dispatchEvent","Event","_handleUnsubscribe","_handleSubscribe","Notification","permission","techs","forEach","prop","ready","registration","pushManager","requestPermission","showNotification","title","options","_source","notification","getNotifications","matched","subscribe","userVisibleOnly","unsubscribe"],"mappings":"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","sourcesContent":["/* @preserve version 1.1.1 */\nconst INIT = 'INIT';\nconst UNSUPPORTED = 'UNSUPPORTED';\nconst PERMISSION_DENIED = 'PERMISSION_DENIED';\nconst PERMISSION_GRANTED = 'PERMISSION_GRANTED';\nconst PERMISSION_PROMPT = 'PERMISSION_PROMPT';\nconst ERROR = 'ERROR';\nconst STARTING_SUBSCRIBE = 'STARTING_SUBSCRIBE';\nconst SUBSCRIBED = 'SUBSCRIBED';\nconst STARTING_UNSUBSCRIBE = 'STARTING_UNSUBSCRIBE';\nconst UNSUBSCRIBED = 'UNSUBSCRIBED';\n\nconst states = {\n    INIT: {\n        id: INIT,\n        interactive: false,\n        subscribed: false\n    },\n    UNSUPPORTED: {\n        id: UNSUPPORTED,\n        interactive: false,\n        subscribed: false\n    },\n    PERMISSION_DENIED: {\n        id: PERMISSION_DENIED,\n        interactive: false,\n        subscribed: false\n    },\n    PERMISSION_GRANTED: {\n        id: PERMISSION_GRANTED,\n        interactive: true,\n        subscribed: false\n    },\n    PERMISSION_PROMPT: {\n        id: PERMISSION_PROMPT,\n        interactive: true,\n        subscribed: false\n    },\n    ERROR: {\n        id: ERROR,\n        interactive: false,\n        subscribed: false\n    },\n    STARTING_SUBSCRIBE: {\n        id: STARTING_SUBSCRIBE,\n        interactive: false,\n        subscribed: false\n    },\n    SUBSCRIBED: {\n        id: SUBSCRIBED,\n        interactive: true,\n        subscribed: true\n    },\n    STARTING_UNSUBSCRIBE: {\n        id: STARTING_UNSUBSCRIBE,\n        interactive: false,\n        subscribed: false\n    },\n    UNSUBSCRIBED: {\n        id: UNSUBSCRIBED,\n        interactive: true,\n        subscribed: false\n    }\n};\n\nconst PUSH_JS_WINDOW = 'PUSH_JS_WINDOW';\nconst PUSH_JS_SW = 'PUSH_JS_SW';\n\nvar noop = () => {};\n\nclass PermissionError extends Error {\n    constructor(message) {\n        super(message);\n\n        this.name = 'PermissionError';\n        this.message = message || this.name;\n        this.stack = (new Error()).stack;\n    }\n}\n\nconst MIN_LENGTH = 10;\nconst randId = function rand(min = MIN_LENGTH, prepend = '') {\n    const result = Math.random().toString(36).slice(2); // eslint-disable-line no-magic-numbers\n\n    return result.length >= MIN_LENGTH ? prepend + result : rand(min, prepend);\n};\n\n/* global Promise */\nconst rejectedStates = {\n    UNSUBSCRIBED: true,\n    PERMISSION_DENIED: true,\n    ERROR: true\n};\n\nconst notifications = Object.create(null);\n\n/**\n * Class Push.\n * @example\n * const push = new Push();\n * push.subscribe().then(subscription => {})\n * push.unsubscribe().then(() => {})\n */\nclass Push {\n    /**\n     * @param {stateChangeCb} [stateChangeCb]\n     * @param {subscriptionUpdateCb} [subscriptionUpdateCb]\n     * @param {logCb} [logCb]\n     * @param {String} [serviceWorker] - Path to service-worker\n     */\n    constructor({\n        stateChangeCb = noop,\n        subscriptionUpdateCb = noop,\n        logCb = noop,\n        serviceWorker\n    } = {}) {\n        this._state = Object.assign({}, states.INIT);\n\n        this._stateChange = stateChangeCb;\n        this._subscriptionUpdateCb = subscriptionUpdateCb;\n        this._log = logCb;\n\n        this._serviceWorker = serviceWorker;\n\n        if (!Push.checkSupport()) {\n            this._setState(states.UNSUPPORTED);\n            return;\n        }\n\n        this._setState(Push.getPermissionState());\n\n        if (rejectedStates[this._state.id]) {\n            return;\n        }\n\n        this._addListener();\n\n        this._installServiceWorker()\n            .then(() => Push.getSubscription())\n            .then(subscription => {\n                if (!subscription) {\n                    this._setState(states.UNSUBSCRIBED);\n                    return;\n                }\n\n                this._setState(states.SUBSCRIBED);\n                this._updateSubscription(subscription);\n            })\n            .catch(error => {\n                this._setState(states.ERROR, error);\n            });\n    }\n\n    /**\n     * Sets new state\n     * @param {Object} state - see states.\n     * @param {Error} [error] - error object.\n     * @private\n     */\n    _setState(state, error) {\n        this._log('State update: ', state, error);\n        this._state = Object.assign({}, this._state, state);\n        this._stateChange(this._state, error);\n    }\n\n    /**\n     * Updates subscription\n     * @param {PushSubscription} subscription\n     * @private\n     */\n    _updateSubscription(subscription) {\n        this._log('Subscription update: ', subscription);\n        this._subscription = subscription;\n        this._subscriptionUpdateCb(this._subscription);\n    }\n\n    /**\n     * Installs service worker\n     * @returns {Promise.<undefined, Error>}\n     * @private\n     */\n    _installServiceWorker() {\n        return this._serviceWorker ? navigator.serviceWorker.register(this._serviceWorker)\n            .catch(error => {\n                this._setState(states.ERROR, error);\n                return Promise.reject(error);\n            }) : Promise.resolve();\n    }\n\n    _addListener() {\n        navigator.serviceWorker.addEventListener('message', event => {\n            let message = {};\n\n            try {\n                message = JSON.parse(event.data);\n            } catch (err) { /* */ }\n\n            if (\n                message.source === PUSH_JS_SW\n                && message.data\n                && message.data.eventName\n                && notifications[message.data.tag]\n                && event.ports\n            ) {\n                const { tag, eventName } = message.data;\n                this._log('Message from SW: ', message.data);\n                event.ports[0].postMessage('OK');\n\n                notifications[tag].dispatchEvent(new Event(eventName));\n            }\n        });\n    }\n\n    /**\n     * @returns {Promise.<T>}\n     * @private\n     */\n    _handleUnsubscribe() {\n        this._updateSubscription(null);\n        this._setState(states.UNSUBSCRIBED);\n\n        return Promise.resolve();\n    }\n\n    /**\n     * @returns {Promise.<PushSubscription>}\n     * @private\n     */\n    _handleSubscribe(subscription) {\n        this._updateSubscription(subscription);\n        this._setState(states.SUBSCRIBED);\n\n        return Promise.resolve(subscription);\n    }\n\n    /**\n     * @returns {Object} Permission state\n     * @public\n     */\n    static getPermissionState() {\n        return {\n            ['denied']: states.PERMISSION_DENIED,\n            ['granted']: states.PERMISSION_GRANTED,\n            ['default']: states.PERMISSION_PROMPT\n        }[Notification.permission] || states.ERROR;\n    }\n\n    /**\n     * @returns {Boolean}\n     * @public\n     */\n    static checkSupport() {\n        const techs = [ 'serviceWorker', 'PushManager', 'permissions' ];\n\n        techs.forEach(prop => {\n            if (!(prop in navigator)) {\n                return false;\n            }\n        });\n\n        if (!Notification) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns pushManager getSubscription promise.\n     * @see https://developer.mozilla.org/ru/docs/Web/API/PushManager/getSubscription\n     * @returns {Promise.<PushSubscription>}\n     * @public\n     */\n    static getSubscription() {\n        return navigator.serviceWorker.ready\n            .then(registration => registration.pushManager.getSubscription());\n    }\n\n    /**\n     * Requests user permission to show notifications.\n     * @returns {Promise.<undefined, Error>}\n     * @public\n     */\n    static requestPermission() {\n        return new Promise((resolve, reject) => {\n            switch (Notification.permission) {\n                case 'denied':\n                    return reject(new PermissionError('Push messages are blocked.'));\n\n                case 'granted':\n                    return resolve();\n\n                case 'default':\n                default:\n                    return Notification.requestPermission(result => {\n                        if (result !== 'granted') {\n                            reject(new PermissionError('Couldn\\'t obtain permission.'));\n                        } else {\n                            resolve();\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Shows notification\n     * @param title\n     * @param options\n     * @returns {Promise.<Notification>}\n     */\n    static showNotification(title, options = {}) {\n        const tag = options.tag || randId();\n        const data = options.data || {};\n        data._source = PUSH_JS_WINDOW;\n\n        let notification;\n\n        return Push.requestPermission()\n            .then(() => navigator.serviceWorker.ready)\n            .then(registration => registration.showNotification(title, Object.assign({}, options, { data, tag })))\n            .then(() => navigator.serviceWorker.ready)\n            .then(registration => registration.getNotifications({ tag }))\n            .then(matched => {\n                notification = matched[0];\n                notifications[tag] = notification;\n\n                return notification;\n            });\n    }\n\n    /**\n     * Creates new subscription\n     * @returns {Promise.<PushSubscription, Error>}\n     * @public\n     */\n    subscribe() {\n        return Push.getSubscription()\n            .then(subscription => {\n                if (subscription) {\n                    return this._handleSubscribe(subscription);\n                }\n\n                this._setState(states.STARTING_SUBSCRIBE);\n\n                return Push.requestPermission()\n                    .then(() => navigator.serviceWorker.ready)\n                    .then(registration => registration.pushManager.subscribe({\n                        userVisibleOnly: true\n                    }))\n                    .then(subscription => this._handleSubscribe(subscription))\n                    .catch(error => {\n                        this._setState((\n                            error instanceof PermissionError\n                                ? Push.getPermissionState()\n                                : states.ERROR\n                        ), error);\n\n                        return Promise.reject(error);\n                    });\n            });\n    }\n\n    /**\n     * Performs unsubscription.\n     * NB: Promise.resolve() will be returned in any case.\n     * We should respect user and treat his intention to unsubscribe in a proper way.\n     * @returns {Promise.<Boolean>}\n     * @public\n     */\n    unsubscribe() {\n        this._setState(states.STARTING_UNSUBSCRIBE);\n\n        return Push.getSubscription()\n            .then(subscription => {\n                if (!subscription) {\n                    return Promise.resolve(true);\n                }\n\n                return subscription.unsubscribe();\n            })\n            .then(() => {\n                this._log('Unsubscribed successfully.');\n            })\n            .catch(() => {\n                this._log('Something went wrong, but whatever.');\n            })\n            .then(() => this._handleUnsubscribe());\n    }\n}\n\nexport { states };export default Push;\n"]},"metadata":{},"sourceType":"module"}